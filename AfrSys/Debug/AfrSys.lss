
AfrSys.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00800060  00000cfe  00000d92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000dc  0080012c  0080012c  00000e5e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ebc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001600  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cc2  00000000  00000000  000026f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001041  00000000  00000000  000033ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000050c  00000000  00000000  000043fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d8  00000000  00000000  00004908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eda  00000000  00000000  000051e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  000060ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
   2:	34 c0       	rjmp	.+104    	; 0x6c <__bad_interrupt>
   4:	33 c0       	rjmp	.+102    	; 0x6c <__bad_interrupt>
   6:	32 c0       	rjmp	.+100    	; 0x6c <__bad_interrupt>
   8:	31 c0       	rjmp	.+98     	; 0x6c <__bad_interrupt>
   a:	30 c0       	rjmp	.+96     	; 0x6c <__bad_interrupt>
   c:	2f c0       	rjmp	.+94     	; 0x6c <__bad_interrupt>
   e:	2e c0       	rjmp	.+92     	; 0x6c <__bad_interrupt>
  10:	2d c0       	rjmp	.+90     	; 0x6c <__bad_interrupt>
  12:	c4 c0       	rjmp	.+392    	; 0x19c <__vector_9>
  14:	9f c0       	rjmp	.+318    	; 0x154 <__vector_10>
  16:	37 c3       	rjmp	.+1646   	; 0x686 <__vector_11>
  18:	29 c0       	rjmp	.+82     	; 0x6c <__bad_interrupt>
  1a:	fd c2       	rjmp	.+1530   	; 0x616 <__vector_13>
  1c:	27 c0       	rjmp	.+78     	; 0x6c <__bad_interrupt>
  1e:	26 c0       	rjmp	.+76     	; 0x6c <__bad_interrupt>
  20:	25 c0       	rjmp	.+74     	; 0x6c <__bad_interrupt>
  22:	24 c0       	rjmp	.+72     	; 0x6c <__bad_interrupt>
  24:	23 c0       	rjmp	.+70     	; 0x6c <__bad_interrupt>
  26:	52 c1       	rjmp	.+676    	; 0x2cc <TIM_vidT1SetPrescaler+0x10>
  28:	54 c1       	rjmp	.+680    	; 0x2d2 <TIM_vidT1SetPrescaler+0x16>
  2a:	57 c1       	rjmp	.+686    	; 0x2da <TIM_vidT1SetPrescaler+0x1e>
  2c:	5a c1       	rjmp	.+692    	; 0x2e2 <TIM_vidT1SetPrescaler+0x26>
  2e:	5d c1       	rjmp	.+698    	; 0x2ea <TIM_vidT1SetPrescaler+0x2e>
  30:	60 c1       	rjmp	.+704    	; 0x2f2 <TIM_vidT1SetPrescaler+0x36>
  32:	63 c1       	rjmp	.+710    	; 0x2fa <TIM_vidT1SetPrescaler+0x3e>
  34:	66 c1       	rjmp	.+716    	; 0x302 <TIM_vidT1SetPrescaler+0x46>

00000036 <__ctors_end>:
  36:	11 24       	eor	r1, r1
  38:	1f be       	out	0x3f, r1	; 63
  3a:	cf e5       	ldi	r28, 0x5F	; 95
  3c:	d4 e0       	ldi	r29, 0x04	; 4
  3e:	de bf       	out	0x3e, r29	; 62
  40:	cd bf       	out	0x3d, r28	; 61

00000042 <__do_copy_data>:
  42:	11 e0       	ldi	r17, 0x01	; 1
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	ee ef       	ldi	r30, 0xFE	; 254
  4a:	fc e0       	ldi	r31, 0x0C	; 12
  4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
  4e:	05 90       	lpm	r0, Z+
  50:	0d 92       	st	X+, r0
  52:	ac 32       	cpi	r26, 0x2C	; 44
  54:	b1 07       	cpc	r27, r17
  56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>

00000058 <__do_clear_bss>:
  58:	22 e0       	ldi	r18, 0x02	; 2
  5a:	ac e2       	ldi	r26, 0x2C	; 44
  5c:	b1 e0       	ldi	r27, 0x01	; 1
  5e:	01 c0       	rjmp	.+2      	; 0x62 <.do_clear_bss_start>

00000060 <.do_clear_bss_loop>:
  60:	1d 92       	st	X+, r1

00000062 <.do_clear_bss_start>:
  62:	a8 30       	cpi	r26, 0x08	; 8
  64:	b2 07       	cpc	r27, r18
  66:	e1 f7       	brne	.-8      	; 0x60 <.do_clear_bss_loop>
  68:	d9 d1       	rcall	.+946    	; 0x41c <main>
  6a:	47 c6       	rjmp	.+3214   	; 0xcfa <_exit>

0000006c <__bad_interrupt>:
  6c:	c9 cf       	rjmp	.-110    	; 0x0 <__vectors>

0000006e <uart_putchar>:
	va_start(ap, format);
	vsnprintf(debugMsg, DBG_BUF_MAX_SIZE, format, ap);
	printf(debugMsg);
	va_end(ap);

}
  6e:	cf 93       	push	r28
  70:	c8 2f       	mov	r28, r24
  72:	8a 30       	cpi	r24, 0x0A	; 10
  74:	11 f4       	brne	.+4      	; 0x7a <uart_putchar+0xc>
  76:	8d e0       	ldi	r24, 0x0D	; 13
  78:	fa df       	rcall	.-12     	; 0x6e <uart_putchar>
  7a:	8c 2f       	mov	r24, r28
  7c:	c0 d2       	rcall	.+1408   	; 0x5fe <UART_sendByte>
  7e:	cf 91       	pop	r28
  80:	08 95       	ret

00000082 <uart_getchar>:
  82:	c3 d2       	rcall	.+1414   	; 0x60a <UART_recieveByte>
  84:	08 95       	ret

00000086 <LOG_vidInit>:
  86:	80 e8       	ldi	r24, 0x80	; 128
  88:	95 e2       	ldi	r25, 0x25	; 37
  8a:	8e d2       	rcall	.+1308   	; 0x5a8 <UART_init>
  8c:	e2 e0       	ldi	r30, 0x02	; 2
  8e:	f2 e0       	ldi	r31, 0x02	; 2
  90:	8e e6       	ldi	r24, 0x6E	; 110
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	93 83       	std	Z+3, r25	; 0x03
  96:	82 83       	std	Z+2, r24	; 0x02
  98:	80 e6       	ldi	r24, 0x60	; 96
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	91 83       	std	Z+1, r25	; 0x01
  9e:	80 83       	st	Z, r24
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
  a6:	08 95       	ret

000000a8 <LOG_vidPrintLn>:
* Parameters[in/out]	: None
* Parameters[out]		: None
*
Note : This function will initialize the default UART peripheral if it is not initialized
*************************************************************************************************************/
extern void LOG_vidPrintLn(char * format, ...){
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	c4 56       	subi	r28, 0x64	; 100
  b6:	d1 09       	sbc	r29, r1
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
	if ( bLoggerInitialized == FALSE ){
  c2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
  c6:	81 11       	cpse	r24, r1
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <LOG_vidPrintLn+0x2a>
		LOG_vidInit();
  ca:	dd df       	rcall	.-70     	; 0x86 <LOG_vidInit>
		bLoggerInitialized = TRUE;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
	}
	char debugMsg[DBG_BUF_MAX_SIZE];
	va_list ap;
	va_start(ap, format);
	vsnprintf(debugMsg, DBG_BUF_MAX_SIZE, format, ap);
  d2:	9e 01       	movw	r18, r28
  d4:	23 59       	subi	r18, 0x93	; 147
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	ad 96       	adiw	r28, 0x2d	; 45
  da:	4e ad       	ldd	r20, Y+62	; 0x3e
  dc:	5f ad       	ldd	r21, Y+63	; 0x3f
  de:	ad 97       	sbiw	r28, 0x2d	; 45
  e0:	64 e6       	ldi	r22, 0x64	; 100
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	8e 01       	movw	r16, r28
  e6:	0f 5f       	subi	r16, 0xFF	; 255
  e8:	1f 4f       	sbci	r17, 0xFF	; 255
  ea:	c8 01       	movw	r24, r16
  ec:	24 d3       	rcall	.+1608   	; 0x736 <vsnprintf>
	printf("%s\r",debugMsg);
  ee:	1f 93       	push	r17
  f0:	0f 93       	push	r16
  f2:	8c e7       	ldi	r24, 0x7C	; 124
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	9f 93       	push	r25
  f8:	8f 93       	push	r24
  fa:	0a d3       	rcall	.+1556   	; 0x710 <printf>
	va_end(ap);
  fc:	0f 90       	pop	r0
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	cc 59       	subi	r28, 0x9C	; 156
 106:	df 4f       	sbci	r29, 0xFF	; 255
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	0f be       	out	0x3f, r0	; 63
 110:	cd bf       	out	0x3d, r28	; 61
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	08 95       	ret

0000011c <SPI_vidMasterInit>:
* Parameters[out]		: None
*
*************************************************************************************************************/
extern void SPI_vidMasterInit(void) {   
	/*Set MOSI, SS, SCK as output*/
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK));
 11c:	87 b3       	in	r24, 0x17	; 23
 11e:	8c 62       	ori	r24, 0x2C	; 44
 120:	87 bb       	out	0x17, r24	; 23
	/*Set MISO as input*/
	SPI_DDR &= ~((1<<SPI_MISO)); 
 122:	bc 98       	cbi	0x17, 4	; 23
	/*set MISO to pull up */ 
	SPI_PORT |= (1<<SPI_MISO);
 124:	c4 9a       	sbi	0x18, 4	; 24
    SPCR = ((1<<SPE) |              /* SPI Enable */
 126:	83 ed       	ldi	r24, 0xD3	; 211
 128:	8d b9       	out	0x0d, r24	; 13
            (0<<DORD)|              /* Data Order (0:MSB first / 1:LSB first) */
            (1<<MSTR)|              /* Master/Slave select 1:master , 0:slave */
            (1<<SPR1)|(1<<SPR0)|    /* SPI Clock Rate */
            (0<<CPOL)|              /* Clock Polarity (0:SCK low / 1:SCK hi when idle) */
            (0<<CPHA));             /* Clock Phase (0:leading / 1:trailing edge sampling) */
    SPSR = (0<<SPI2X);				/* Double SPI Speed Bit */
 12a:	1e b8       	out	0x0e, r1	; 14
 12c:	08 95       	ret

0000012e <SPI_eSendByte>:
*************************************************************************************************************/
extern STD_ERR_T SPI_eSendByte(uint8 u8Data){
	uint8 u8TimeOut = SPI_TIME_OUT;
	STD_ERR_T errRetVal = STD_ERR_NOK;
	
	SPDR = u8Data;
 12e:	8f b9       	out	0x0f, r24	; 15
	while( !(SPSR & (1<<SPIF)) && (u8TimeOut !=0 )){
 130:	77 99       	sbic	0x0e, 7	; 14
 132:	0c c0       	rjmp	.+24     	; 0x14c <SPI_eSendByte+0x1e>
 134:	88 e2       	ldi	r24, 0x28	; 40
		u8TimeOut--;
 136:	81 50       	subi	r24, 0x01	; 1
extern STD_ERR_T SPI_eSendByte(uint8 u8Data){
	uint8 u8TimeOut = SPI_TIME_OUT;
	STD_ERR_T errRetVal = STD_ERR_NOK;
	
	SPDR = u8Data;
	while( !(SPSR & (1<<SPIF)) && (u8TimeOut !=0 )){
 138:	77 99       	sbic	0x0e, 7	; 14
 13a:	04 c0       	rjmp	.+8      	; 0x144 <SPI_eSendByte+0x16>
 13c:	81 11       	cpse	r24, r1
 13e:	fb cf       	rjmp	.-10     	; 0x136 <SPI_eSendByte+0x8>
* Parameters[out]		: STD_ERR_T completion error status
*
*************************************************************************************************************/
extern STD_ERR_T SPI_eSendByte(uint8 u8Data){
	uint8 u8TimeOut = SPI_TIME_OUT;
	STD_ERR_T errRetVal = STD_ERR_NOK;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	08 95       	ret
	
	SPDR = u8Data;
	while( !(SPSR & (1<<SPIF)) && (u8TimeOut !=0 )){
		u8TimeOut--;
	}
	if(u8TimeOut != 0){
 144:	88 23       	and	r24, r24
 146:	21 f0       	breq	.+8      	; 0x150 <SPI_eSendByte+0x22>
		errRetVal = STD_ERR_OK;
 148:	8e ef       	ldi	r24, 0xFE	; 254
 14a:	08 95       	ret
 14c:	8e ef       	ldi	r24, 0xFE	; 254
 14e:	08 95       	ret
* Parameters[out]		: STD_ERR_T completion error status
*
*************************************************************************************************************/
extern STD_ERR_T SPI_eSendByte(uint8 u8Data){
	uint8 u8TimeOut = SPI_TIME_OUT;
	STD_ERR_T errRetVal = STD_ERR_NOK;
 150:	8f ef       	ldi	r24, 0xFF	; 255
	}
	if(u8TimeOut != 0){
		errRetVal = STD_ERR_OK;
	}
	return 	errRetVal;
}
 152:	08 95       	ret

00000154 <__vector_10>:

//TODO::handle receive and transmit
ISR(SPI_STC_vect){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
	
	
	DIO_vidDigitalPinToggle(DIO_PC2);
 176:	8a e0       	ldi	r24, 0x0A	; 10
 178:	e6 d1       	rcall	.+972    	; 0x546 <DIO_vidDigitalPinToggle>
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <__vector_9>:
	/* turn off timer1 PWM mode */
	CLEAR_BIT(TCCR1A,WGM11);
	CLEAR_BIT(TCCR1A,WGM10);
	/* set PWM1A/B (OutputCompare action) to none */
	TIM_vidT1PWMAOff();
	TIM_vidT1PWMBOff();
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
 1be:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <TIM_u32OverFlowCounter>
 1c2:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <TIM_u32OverFlowCounter+0x1>
 1c6:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <TIM_u32OverFlowCounter+0x2>
 1ca:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <TIM_u32OverFlowCounter+0x3>
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	a1 1d       	adc	r26, r1
 1d2:	b1 1d       	adc	r27, r1
 1d4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <TIM_u32OverFlowCounter>
 1d8:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <TIM_u32OverFlowCounter+0x1>
 1dc:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <TIM_u32OverFlowCounter+0x2>
 1e0:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <TIM_u32OverFlowCounter+0x3>
 1e4:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <TIM_u32Millis>
 1e8:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <TIM_u32Millis+0x1>
 1ec:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <TIM_u32Millis+0x2>
 1f0:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <TIM_u32Millis+0x3>
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	a1 1d       	adc	r26, r1
 1f8:	b1 1d       	adc	r27, r1
 1fa:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <TIM_u32Millis>
 1fe:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <TIM_u32Millis+0x1>
 202:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <TIM_u32Millis+0x2>
 206:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <TIM_u32Millis+0x3>
 20a:	83 e8       	ldi	r24, 0x83	; 131
 20c:	82 bf       	out	0x32, r24	; 50
 20e:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <TIM_u32OverFlowCounter>
 212:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <TIM_u32OverFlowCounter+0x1>
 216:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <TIM_u32OverFlowCounter+0x2>
 21a:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <TIM_u32OverFlowCounter+0x3>
 21e:	28 ee       	ldi	r18, 0xE8	; 232
 220:	33 e0       	ldi	r19, 0x03	; 3
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	52 d2       	rcall	.+1188   	; 0x6cc <__udivmodsi4>
 228:	67 2b       	or	r22, r23
 22a:	68 2b       	or	r22, r24
 22c:	69 2b       	or	r22, r25
 22e:	79 f4       	brne	.+30     	; 0x24e <__vector_9+0xb2>
 230:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <TIM_u32OverFlowCounter>
 234:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <TIM_u32OverFlowCounter+0x1>
 238:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <TIM_u32OverFlowCounter+0x2>
 23c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <TIM_u32OverFlowCounter+0x3>
 240:	80 e8       	ldi	r24, 0x80	; 128
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	9f 93       	push	r25
 246:	8f 93       	push	r24
 248:	2f df       	rcall	.-418    	; 0xa8 <LOG_vidPrintLn>
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <pfvOnT0OverFlowClbk>
 252:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <pfvOnT0OverFlowClbk+0x1>
 256:	30 97       	sbiw	r30, 0x00	; 0
 258:	09 f0       	breq	.+2      	; 0x25c <__vector_9+0xc0>
 25a:	09 95       	icall
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <TIM_vidT1SetPwmChannelsMode>:
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	49 f0       	breq	.+18     	; 0x294 <TIM_vidT1SetPwmChannelsMode+0x16>
 282:	28 f0       	brcs	.+10     	; 0x28e <TIM_vidT1SetPwmChannelsMode+0x10>
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	51 f0       	breq	.+20     	; 0x29c <TIM_vidT1SetPwmChannelsMode+0x1e>
 288:	83 30       	cpi	r24, 0x03	; 3
 28a:	61 f0       	breq	.+24     	; 0x2a4 <TIM_vidT1SetPwmChannelsMode+0x26>
 28c:	0f c0       	rjmp	.+30     	; 0x2ac <TIM_vidT1SetPwmChannelsMode+0x2e>
 28e:	8f b5       	in	r24, 0x2f	; 47
 290:	8f bd       	out	0x2f, r24	; 47
 292:	08 95       	ret
 294:	8f b5       	in	r24, 0x2f	; 47
 296:	80 65       	ori	r24, 0x50	; 80
 298:	8f bd       	out	0x2f, r24	; 47
 29a:	08 95       	ret
 29c:	8f b5       	in	r24, 0x2f	; 47
 29e:	80 6a       	ori	r24, 0xA0	; 160
 2a0:	8f bd       	out	0x2f, r24	; 47
 2a2:	08 95       	ret
 2a4:	8f b5       	in	r24, 0x2f	; 47
 2a6:	80 6f       	ori	r24, 0xF0	; 240
 2a8:	8f bd       	out	0x2f, r24	; 47
 2aa:	08 95       	ret
 2ac:	80 e9       	ldi	r24, 0x90	; 144
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	9f 93       	push	r25
 2b2:	8f 93       	push	r24
 2b4:	f9 de       	rcall	.-526    	; 0xa8 <LOG_vidPrintLn>
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	08 95       	ret

000002bc <TIM_vidT1SetPrescaler>:
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	88 30       	cpi	r24, 0x08	; 8
 2c0:	91 05       	cpc	r25, r1
 2c2:	18 f5       	brcc	.+70     	; 0x30a <TIM_vidT1SetPrescaler+0x4e>
 2c4:	fc 01       	movw	r30, r24
 2c6:	ed 5e       	subi	r30, 0xED	; 237
 2c8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ca:	09 94       	ijmp
 2cc:	8e b5       	in	r24, 0x2e	; 46
 2ce:	8e bd       	out	0x2e, r24	; 46
 2d0:	08 95       	ret
 2d2:	8e b5       	in	r24, 0x2e	; 46
 2d4:	81 60       	ori	r24, 0x01	; 1
 2d6:	8e bd       	out	0x2e, r24	; 46
 2d8:	08 95       	ret
 2da:	8e b5       	in	r24, 0x2e	; 46
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	8e bd       	out	0x2e, r24	; 46
 2e0:	08 95       	ret
 2e2:	8e b5       	in	r24, 0x2e	; 46
 2e4:	83 60       	ori	r24, 0x03	; 3
 2e6:	8e bd       	out	0x2e, r24	; 46
 2e8:	08 95       	ret
 2ea:	8e b5       	in	r24, 0x2e	; 46
 2ec:	84 60       	ori	r24, 0x04	; 4
 2ee:	8e bd       	out	0x2e, r24	; 46
 2f0:	08 95       	ret
 2f2:	8e b5       	in	r24, 0x2e	; 46
 2f4:	85 60       	ori	r24, 0x05	; 5
 2f6:	8e bd       	out	0x2e, r24	; 46
 2f8:	08 95       	ret
 2fa:	8e b5       	in	r24, 0x2e	; 46
 2fc:	86 60       	ori	r24, 0x06	; 6
 2fe:	8e bd       	out	0x2e, r24	; 46
 300:	08 95       	ret
 302:	8e b5       	in	r24, 0x2e	; 46
 304:	87 60       	ori	r24, 0x07	; 7
 306:	8e bd       	out	0x2e, r24	; 46
 308:	08 95       	ret
 30a:	8c ea       	ldi	r24, 0xAC	; 172
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	9f 93       	push	r25
 310:	8f 93       	push	r24
 312:	ca de       	rcall	.-620    	; 0xa8 <LOG_vidPrintLn>
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	08 95       	ret

0000031a <TIM_vidT1PWMInit>:
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	c6 2f       	mov	r28, r22
 320:	d4 2f       	mov	r29, r20
 322:	88 30       	cpi	r24, 0x08	; 8
 324:	21 f0       	breq	.+8      	; 0x32e <TIM_vidT1PWMInit+0x14>
 326:	80 f0       	brcs	.+32     	; 0x348 <TIM_vidT1PWMInit+0x2e>
 328:	8b 30       	cpi	r24, 0x0B	; 11
 32a:	a8 f0       	brcs	.+42     	; 0x356 <TIM_vidT1PWMInit+0x3c>
 32c:	0d c0       	rjmp	.+26     	; 0x348 <TIM_vidT1PWMInit+0x2e>
 32e:	8e b5       	in	r24, 0x2e	; 46
 330:	8f 7e       	andi	r24, 0xEF	; 239
 332:	8e bd       	out	0x2e, r24	; 46
 334:	8e b5       	in	r24, 0x2e	; 46
 336:	88 60       	ori	r24, 0x08	; 8
 338:	8e bd       	out	0x2e, r24	; 46
 33a:	8f b5       	in	r24, 0x2f	; 47
 33c:	8d 7f       	andi	r24, 0xFD	; 253
 33e:	8f bd       	out	0x2f, r24	; 47
 340:	8f b5       	in	r24, 0x2f	; 47
 342:	81 60       	ori	r24, 0x01	; 1
 344:	8f bd       	out	0x2f, r24	; 47
 346:	07 c0       	rjmp	.+14     	; 0x356 <TIM_vidT1PWMInit+0x3c>
 348:	84 ec       	ldi	r24, 0xC4	; 196
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	9f 93       	push	r25
 34e:	8f 93       	push	r24
 350:	ab de       	rcall	.-682    	; 0xa8 <LOG_vidPrintLn>
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	1b bc       	out	0x2b, r1	; 43
 358:	1a bc       	out	0x2a, r1	; 42
 35a:	19 bc       	out	0x29, r1	; 41
 35c:	18 bc       	out	0x28, r1	; 40
 35e:	8d 2f       	mov	r24, r29
 360:	ad df       	rcall	.-166    	; 0x2bc <TIM_vidT1SetPrescaler>
 362:	8c 2f       	mov	r24, r28
 364:	8c df       	rcall	.-232    	; 0x27e <TIM_vidT1SetPwmChannelsMode>
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <TIM_vidT1PwmASetDuty>:
	 NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
			pwmDuty should be in the range 0-511 for 9bit PWM
			pwmDuty should be in the range 0-1023 for 10bit PWM
	*********************************************************************/

	OCR1A = u16PwmDuty;
 36c:	9b bd       	out	0x2b, r25	; 43
 36e:	8a bd       	out	0x2a, r24	; 42
 370:	08 95       	ret

00000372 <TIM_vidT1PwmBSetDuty>:
	this PWM output is generated on OC1B pin
	NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
			pwmDuty should be in the range 0-511 for 9bit PWM
			pwmDuty should be in the range 0-1023 for 10bit PWM
	*********************************************************************/
	OCR1B = u16PwmDuty;
 372:	99 bd       	out	0x29, r25	; 41
 374:	88 bd       	out	0x28, r24	; 40
 376:	08 95       	ret

00000378 <MCU_vidResetSrcCheck>:
*
**************************************************************************************************************/
extern void MCU_vidResetSrcCheck(void){

	/* Reset Source checking */
	if (MCUCSR & (1<<PORF))
 378:	04 b6       	in	r0, 0x34	; 52
 37a:	00 fe       	sbrs	r0, 0
 37c:	09 c0       	rjmp	.+18     	; 0x390 <MCU_vidResetSrcCheck+0x18>
	{
		/* Power-on Reset */
		MCUCSR=0;
 37e:	14 be       	out	0x34, r1	; 52

		INFO("Power-on Reset");
 380:	81 ed       	ldi	r24, 0xD1	; 209
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	9f 93       	push	r25
 386:	8f 93       	push	r24
 388:	8f de       	rcall	.-738    	; 0xa8 <LOG_vidPrintLn>
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	08 95       	ret
	}
	else if (MCUCSR & (1<<EXTRF))
 390:	04 b6       	in	r0, 0x34	; 52
 392:	01 fe       	sbrs	r0, 1
 394:	09 c0       	rjmp	.+18     	; 0x3a8 <MCU_vidResetSrcCheck+0x30>
	{
		/* External Reset */
		MCUCSR=0;
 396:	14 be       	out	0x34, r1	; 52

		INFO("External Reset");
 398:	80 ee       	ldi	r24, 0xE0	; 224
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	9f 93       	push	r25
 39e:	8f 93       	push	r24
 3a0:	83 de       	rcall	.-762    	; 0xa8 <LOG_vidPrintLn>
 3a2:	0f 90       	pop	r0
 3a4:	0f 90       	pop	r0
 3a6:	08 95       	ret
	}
	else if (MCUCSR & (1<<BORF))
 3a8:	04 b6       	in	r0, 0x34	; 52
 3aa:	02 fe       	sbrs	r0, 2
 3ac:	09 c0       	rjmp	.+18     	; 0x3c0 <MCU_vidResetSrcCheck+0x48>
	{
		/* Brown-Out Reset */
		MCUCSR=0;
 3ae:	14 be       	out	0x34, r1	; 52

		INFO("Brown-Out Reset");
 3b0:	8f ee       	ldi	r24, 0xEF	; 239
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	9f 93       	push	r25
 3b6:	8f 93       	push	r24
 3b8:	77 de       	rcall	.-786    	; 0xa8 <LOG_vidPrintLn>
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	08 95       	ret
	}
	else if (MCUCSR & (1<<WDRF))
 3c0:	04 b6       	in	r0, 0x34	; 52
 3c2:	03 fe       	sbrs	r0, 3
 3c4:	09 c0       	rjmp	.+18     	; 0x3d8 <MCU_vidResetSrcCheck+0x60>
	{
		/* Watchdog Reset */
		MCUCSR=0;
 3c6:	14 be       	out	0x34, r1	; 52

		INFO("Watchdog Reset");
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	9f 93       	push	r25
 3ce:	8f 93       	push	r24
 3d0:	6b de       	rcall	.-810    	; 0xa8 <LOG_vidPrintLn>
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	08 95       	ret
	} else {
		INFO("UNKNOWN RESET");
 3d8:	8e e0       	ldi	r24, 0x0E	; 14
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	9f 93       	push	r25
 3de:	8f 93       	push	r24
 3e0:	63 de       	rcall	.-826    	; 0xa8 <LOG_vidPrintLn>
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	08 95       	ret

000003e8 <MCU_vidDisableInterrupts>:
* Parameters[out]		: None.
*
*************************************************************************************************************/
extern void MCU_vidDisableInterrupts(void)
{
	if(MCU_u8NoOfInterrDisabled == (uint8)0)
 3e8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MCU_u8NoOfInterrDisabled>
 3ec:	81 11       	cpse	r24, r1
 3ee:	07 c0       	rjmp	.+14     	; 0x3fe <MCU_vidDisableInterrupts+0x16>
	{
		cli();
 3f0:	f8 94       	cli
		MCU_u8NoOfInterrDisabled ++;
 3f2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MCU_u8NoOfInterrDisabled>
 3f6:	8f 5f       	subi	r24, 0xFF	; 255
 3f8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <MCU_u8NoOfInterrDisabled>
 3fc:	08 95       	ret
	}
	else
	{
		MCU_u8NoOfInterrDisabled ++;
 3fe:	8f 5f       	subi	r24, 0xFF	; 255
 400:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <MCU_u8NoOfInterrDisabled>
 404:	08 95       	ret

00000406 <MCU_vidEnableInterrupts>:
* Parameters[out]		: None.
*
*************************************************************************************************************/
extern void MCU_vidEnableInterrupts( void )
{
	if(MCU_u8NoOfInterrDisabled > (uint8)0)
 406:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MCU_u8NoOfInterrDisabled>
 40a:	88 23       	and	r24, r24
 40c:	29 f0       	breq	.+10     	; 0x418 <MCU_vidEnableInterrupts+0x12>
	{
		MCU_u8NoOfInterrDisabled --;
 40e:	81 50       	subi	r24, 0x01	; 1
 410:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <MCU_u8NoOfInterrDisabled>
	}
	else
	{

	}
	if(MCU_u8NoOfInterrDisabled ==(uint8)0)
 414:	81 11       	cpse	r24, r1
 416:	01 c0       	rjmp	.+2      	; 0x41a <MCU_vidEnableInterrupts+0x14>
	{
		sei();
 418:	78 94       	sei
 41a:	08 95       	ret

0000041c <main>:
int main(void)
{
	uint16 u16AdcVal=0;
	//uint8 u8ValStr [20];
	
	DIO_vidSetPinMode(DIO_PC2, OUTPUT);
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	8a e0       	ldi	r24, 0x0A	; 10
 420:	2c d0       	rcall	.+88     	; 0x47a <DIO_vidSetPinMode>
	DIO_vidSetPinMode(DIO_PB1, OUTPUT);
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	29 d0       	rcall	.+82     	; 0x47a <DIO_vidSetPinMode>
	DIO_vidSetPinMode(DIO_PC0, INPUT);
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	88 e0       	ldi	r24, 0x08	; 8
 42c:	26 d0       	rcall	.+76     	; 0x47a <DIO_vidSetPinMode>
	
	DDRB = 0x06;                      // Set Port PB1 and PB2 as Output
 42e:	86 e0       	ldi	r24, 0x06	; 6
 430:	87 bb       	out	0x17, r24	; 23
	
	MCU_vidDisableInterrupts();
 432:	da df       	rcall	.-76     	; 0x3e8 <MCU_vidDisableInterrupts>
	
	UART_init(9600U);
 434:	80 e8       	ldi	r24, 0x80	; 128
 436:	95 e2       	ldi	r25, 0x25	; 37
 438:	b7 d0       	rcall	.+366    	; 0x5a8 <UART_init>
	SPI_vidMasterInit();
 43a:	70 de       	rcall	.-800    	; 0x11c <SPI_vidMasterInit>
	
	
	TIM_vidT1PWMInit(8, TIM1_CHA_CHB_NON_INVERTING, TIM1_1024_PRESCALER);
 43c:	45 e0       	ldi	r20, 0x05	; 5
 43e:	62 e0       	ldi	r22, 0x02	; 2
 440:	88 e0       	ldi	r24, 0x08	; 8
 442:	6b df       	rcall	.-298    	; 0x31a <TIM_vidT1PWMInit>
	
	TIM_vidT1PwmASetDuty(127);
 444:	8f e7       	ldi	r24, 0x7F	; 127
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	91 df       	rcall	.-222    	; 0x36c <TIM_vidT1PwmASetDuty>
	TIM_vidT1PwmBSetDuty(127);
 44a:	8f e7       	ldi	r24, 0x7F	; 127
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	91 df       	rcall	.-222    	; 0x372 <TIM_vidT1PwmBSetDuty>

	//ADC_vidInit();
	
	MCU_vidEnableInterrupts();
 450:	da df       	rcall	.-76     	; 0x406 <MCU_vidEnableInterrupts>
		

	//int input=23765;
	int fVolt;

	MCU_vidResetSrcCheck();
 452:	92 df       	rcall	.-220    	; 0x378 <MCU_vidResetSrcCheck>

	while(1) {
		INFO("logger test! \n");
 454:	cc e1       	ldi	r28, 0x1C	; 28
 456:	d1 e0       	ldi	r29, 0x01	; 1
 458:	df 93       	push	r29
 45a:	cf 93       	push	r28
 45c:	25 de       	rcall	.-950    	; 0xa8 <LOG_vidPrintLn>
		SPI_eSendByte(0x01);
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	66 de       	rcall	.-820    	; 0x12e <SPI_eSendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 462:	9f e3       	ldi	r25, 0x3F	; 63
 464:	2d e0       	ldi	r18, 0x0D	; 13
 466:	83 e0       	ldi	r24, 0x03	; 3
 468:	91 50       	subi	r25, 0x01	; 1
 46a:	20 40       	sbci	r18, 0x00	; 0
 46c:	80 40       	sbci	r24, 0x00	; 0
 46e:	e1 f7       	brne	.-8      	; 0x468 <__stack+0x9>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__stack+0x13>
 472:	00 00       	nop
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	ef cf       	rjmp	.-34     	; 0x458 <main+0x3c>

0000047a <DIO_vidSetPinMode>:
		if(u8Pin >= DIO_PB0 && u8Pin <= DIO_PB7){
			WRITE_BIT_VAL(PORTB, u8Pin,u8Value);
		} else if(u8Pin >= DIO_PC0 && u8Pin <= DIO_PC6){
			WRITE_BIT_VAL(PORTC, (u8Pin-8),u8Value);
		} else if(u8Pin >= DIO_PD0 && u8Pin <= DIO_PD7){
			WRITE_BIT_VAL(PORTD, (u8Pin-15),u8Value);
 47a:	62 30       	cpi	r22, 0x02	; 2
 47c:	08 f0       	brcs	.+2      	; 0x480 <DIO_vidSetPinMode+0x6>
 47e:	62 c0       	rjmp	.+196    	; 0x544 <DIO_vidSetPinMode+0xca>
 480:	88 30       	cpi	r24, 0x08	; 8
 482:	e8 f4       	brcc	.+58     	; 0x4be <DIO_vidSetPinMode+0x44>
 484:	66 23       	and	r22, r22
 486:	69 f0       	breq	.+26     	; 0x4a2 <DIO_vidSetPinMode+0x28>
 488:	47 b3       	in	r20, 0x17	; 23
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	b9 01       	movw	r22, r18
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_vidSetPinMode+0x1c>
 492:	66 0f       	add	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	8a 95       	dec	r24
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_vidSetPinMode+0x18>
 49a:	cb 01       	movw	r24, r22
 49c:	84 2b       	or	r24, r20
 49e:	87 bb       	out	0x17, r24	; 23
 4a0:	08 95       	ret
 4a2:	47 b3       	in	r20, 0x17	; 23
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	b9 01       	movw	r22, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_vidSetPinMode+0x36>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	8a 95       	dec	r24
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_vidSetPinMode+0x32>
 4b4:	cb 01       	movw	r24, r22
 4b6:	80 95       	com	r24
 4b8:	84 23       	and	r24, r20
 4ba:	87 bb       	out	0x17, r24	; 23
 4bc:	08 95       	ret
 4be:	98 ef       	ldi	r25, 0xF8	; 248
 4c0:	98 0f       	add	r25, r24
 4c2:	97 30       	cpi	r25, 0x07	; 7
 4c4:	f0 f4       	brcc	.+60     	; 0x502 <DIO_vidSetPinMode+0x88>
 4c6:	66 23       	and	r22, r22
 4c8:	69 f0       	breq	.+26     	; 0x4e4 <DIO_vidSetPinMode+0x6a>
 4ca:	44 b3       	in	r20, 0x14	; 20
 4cc:	21 e0       	ldi	r18, 0x01	; 1
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	b9 01       	movw	r22, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_vidSetPinMode+0x5e>
 4d4:	66 0f       	add	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	9a 95       	dec	r25
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_vidSetPinMode+0x5a>
 4dc:	cb 01       	movw	r24, r22
 4de:	84 2b       	or	r24, r20
 4e0:	84 bb       	out	0x14, r24	; 20
 4e2:	08 95       	ret
 4e4:	44 b3       	in	r20, 0x14	; 20
 4e6:	88 50       	subi	r24, 0x08	; 8
 4e8:	21 e0       	ldi	r18, 0x01	; 1
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	b9 01       	movw	r22, r18
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_vidSetPinMode+0x7a>
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	8a 95       	dec	r24
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_vidSetPinMode+0x76>
 4f8:	cb 01       	movw	r24, r22
 4fa:	80 95       	com	r24
 4fc:	84 23       	and	r24, r20
 4fe:	84 bb       	out	0x14, r24	; 20
 500:	08 95       	ret
 502:	91 ef       	ldi	r25, 0xF1	; 241
 504:	98 0f       	add	r25, r24
 506:	98 30       	cpi	r25, 0x08	; 8
 508:	e8 f4       	brcc	.+58     	; 0x544 <DIO_vidSetPinMode+0xca>
 50a:	66 23       	and	r22, r22
 50c:	69 f0       	breq	.+26     	; 0x528 <DIO_vidSetPinMode+0xae>
 50e:	41 b3       	in	r20, 0x11	; 17
 510:	21 e0       	ldi	r18, 0x01	; 1
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	b9 01       	movw	r22, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_vidSetPinMode+0xa2>
 518:	66 0f       	add	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	9a 95       	dec	r25
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_vidSetPinMode+0x9e>
 520:	cb 01       	movw	r24, r22
 522:	84 2b       	or	r24, r20
 524:	81 bb       	out	0x11, r24	; 17
 526:	08 95       	ret
 528:	41 b3       	in	r20, 0x11	; 17
 52a:	8f 50       	subi	r24, 0x0F	; 15
 52c:	21 e0       	ldi	r18, 0x01	; 1
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	b9 01       	movw	r22, r18
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_vidSetPinMode+0xbe>
 534:	66 0f       	add	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	8a 95       	dec	r24
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_vidSetPinMode+0xba>
 53c:	cb 01       	movw	r24, r22
 53e:	80 95       	com	r24
 540:	84 23       	and	r24, r20
 542:	81 bb       	out	0x11, r24	; 17
 544:	08 95       	ret

00000546 <DIO_vidDigitalPinToggle>:
* Parameters[in/out]	: None
* Parameters[out]		: None
*
*************************************************************************************************************/
extern void	DIO_vidDigitalPinToggle	(uint8 u8Pin){
	if(u8Pin >= DIO_PB0 && u8Pin <= DIO_PB7){
 546:	88 30       	cpi	r24, 0x08	; 8
 548:	68 f4       	brcc	.+26     	; 0x564 <DIO_vidDigitalPinToggle+0x1e>
		TOGGLE_BIT(PORTB, u8Pin);
 54a:	48 b3       	in	r20, 0x18	; 24
 54c:	21 e0       	ldi	r18, 0x01	; 1
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	b9 01       	movw	r22, r18
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_vidDigitalPinToggle+0x12>
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	8a 95       	dec	r24
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_vidDigitalPinToggle+0xe>
 55c:	cb 01       	movw	r24, r22
 55e:	84 27       	eor	r24, r20
 560:	88 bb       	out	0x18, r24	; 24
 562:	08 95       	ret
	} else if(u8Pin >= DIO_PC0 && u8Pin <= DIO_PC6){
 564:	98 ef       	ldi	r25, 0xF8	; 248
 566:	98 0f       	add	r25, r24
 568:	97 30       	cpi	r25, 0x07	; 7
 56a:	68 f4       	brcc	.+26     	; 0x586 <DIO_vidDigitalPinToggle+0x40>
		TOGGLE_BIT(PORTC, (u8Pin-8));
 56c:	45 b3       	in	r20, 0x15	; 21
 56e:	21 e0       	ldi	r18, 0x01	; 1
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	b9 01       	movw	r22, r18
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_vidDigitalPinToggle+0x34>
 576:	66 0f       	add	r22, r22
 578:	77 1f       	adc	r23, r23
 57a:	9a 95       	dec	r25
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_vidDigitalPinToggle+0x30>
 57e:	cb 01       	movw	r24, r22
 580:	84 27       	eor	r24, r20
 582:	85 bb       	out	0x15, r24	; 21
 584:	08 95       	ret
	} else if(u8Pin >= DIO_PD0 && u8Pin <= DIO_PD7){
 586:	91 ef       	ldi	r25, 0xF1	; 241
 588:	98 0f       	add	r25, r24
 58a:	98 30       	cpi	r25, 0x08	; 8
 58c:	60 f4       	brcc	.+24     	; 0x5a6 <DIO_vidDigitalPinToggle+0x60>
		TOGGLE_BIT(PORTD, (u8Pin-15));
 58e:	42 b3       	in	r20, 0x12	; 18
 590:	21 e0       	ldi	r18, 0x01	; 1
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	b9 01       	movw	r22, r18
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_vidDigitalPinToggle+0x56>
 598:	66 0f       	add	r22, r22
 59a:	77 1f       	adc	r23, r23
 59c:	9a 95       	dec	r25
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_vidDigitalPinToggle+0x52>
 5a0:	cb 01       	movw	r24, r22
 5a2:	84 27       	eor	r24, r20
 5a4:	82 bb       	out	0x12, r24	; 18
 5a6:	08 95       	ret

000005a8 <UART_init>:
	{
		i++;
		a_str_Ptr[i] = UART_recieveByte();
	}
	a_str_Ptr[i] = '#';
}
 5a8:	9c 01       	movw	r18, r24
 5aa:	59 9a       	sbi	0x0b, 1	; 11
 5ac:	54 9a       	sbi	0x0a, 4	; 10
 5ae:	53 9a       	sbi	0x0a, 3	; 10
 5b0:	57 9a       	sbi	0x0a, 7	; 10
 5b2:	56 9a       	sbi	0x0a, 6	; 10
 5b4:	80 b5       	in	r24, 0x20	; 32
 5b6:	80 68       	ori	r24, 0x80	; 128
 5b8:	80 bd       	out	0x20, r24	; 32
 5ba:	80 b5       	in	r24, 0x20	; 32
 5bc:	82 60       	ori	r24, 0x02	; 2
 5be:	80 bd       	out	0x20, r24	; 32
 5c0:	80 b5       	in	r24, 0x20	; 32
 5c2:	84 60       	ori	r24, 0x04	; 4
 5c4:	80 bd       	out	0x20, r24	; 32
 5c6:	c9 01       	movw	r24, r18
 5c8:	a0 e0       	ldi	r26, 0x00	; 0
 5ca:	b0 e0       	ldi	r27, 0x00	; 0
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	aa 1f       	adc	r26, r26
 5d2:	bb 1f       	adc	r27, r27
 5d4:	88 0f       	add	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	aa 1f       	adc	r26, r26
 5da:	bb 1f       	adc	r27, r27
 5dc:	9c 01       	movw	r18, r24
 5de:	ad 01       	movw	r20, r26
 5e0:	22 0f       	add	r18, r18
 5e2:	33 1f       	adc	r19, r19
 5e4:	44 1f       	adc	r20, r20
 5e6:	55 1f       	adc	r21, r21
 5e8:	60 e4       	ldi	r22, 0x40	; 64
 5ea:	72 e4       	ldi	r23, 0x42	; 66
 5ec:	8f e0       	ldi	r24, 0x0F	; 15
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	6d d0       	rcall	.+218    	; 0x6cc <__udivmodsi4>
 5f2:	21 50       	subi	r18, 0x01	; 1
 5f4:	31 09       	sbc	r19, r1
 5f6:	3f 77       	andi	r19, 0x7F	; 127
 5f8:	30 bd       	out	0x20, r19	; 32
 5fa:	29 b9       	out	0x09, r18	; 9
 5fc:	08 95       	ret

000005fe <UART_sendByte>:
 5fe:	5d 9b       	sbis	0x0b, 5	; 11
 600:	fe cf       	rjmp	.-4      	; 0x5fe <UART_sendByte>
 602:	53 9a       	sbi	0x0a, 3	; 10
 604:	8c b9       	out	0x0c, r24	; 12
 606:	53 98       	cbi	0x0a, 3	; 10
 608:	08 95       	ret

0000060a <UART_recieveByte>:
 60a:	54 9a       	sbi	0x0a, 4	; 10
 60c:	5f 9b       	sbis	0x0b, 7	; 11
 60e:	fe cf       	rjmp	.-4      	; 0x60c <UART_recieveByte+0x2>
 610:	54 98       	cbi	0x0a, 4	; 10
 612:	8c b1       	in	r24, 0x0c	; 12
 614:	08 95       	ret

00000616 <__vector_13>:

ISR(USART_TXC_vect){
 616:	1f 92       	push	r1
 618:	0f 92       	push	r0
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	0f 92       	push	r0
 61e:	11 24       	eor	r1, r1
 620:	2f 93       	push	r18
 622:	3f 93       	push	r19
 624:	4f 93       	push	r20
 626:	5f 93       	push	r21
 628:	6f 93       	push	r22
 62a:	7f 93       	push	r23
 62c:	8f 93       	push	r24
 62e:	9f 93       	push	r25
 630:	af 93       	push	r26
 632:	bf 93       	push	r27
 634:	ef 93       	push	r30
 636:	ff 93       	push	r31
	u8TransmitBufferIndex++;
 638:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <u8TransmitBufferIndex>
 63c:	ef 5f       	subi	r30, 0xFF	; 255
 63e:	e0 93 9b 01 	sts	0x019B, r30	; 0x80019b <u8TransmitBufferIndex>
	if(au8UartTransmitBuffer[u8TransmitBufferIndex] != '\0'){
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	e4 56       	subi	r30, 0x64	; 100
 646:	fe 4f       	sbci	r31, 0xFE	; 254
 648:	80 81       	ld	r24, Z
 64a:	88 23       	and	r24, r24
 64c:	11 f0       	breq	.+4      	; 0x652 <__vector_13+0x3c>
		UART_sendByte(au8UartTransmitBuffer[u8TransmitBufferIndex]);
 64e:	d7 df       	rcall	.-82     	; 0x5fe <UART_sendByte>
 650:	09 c0       	rjmp	.+18     	; 0x664 <__vector_13+0x4e>
	} else {
		u8TransmitBufferIndex = 0;
 652:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <u8TransmitBufferIndex>
		memset(au8UartTransmitBuffer, '\0',u8TX_BUFFER_SIZE);
 656:	84 e6       	ldi	r24, 0x64	; 100
 658:	ec e9       	ldi	r30, 0x9C	; 156
 65a:	f1 e0       	ldi	r31, 0x01	; 1
 65c:	df 01       	movw	r26, r30
 65e:	1d 92       	st	X+, r1
 660:	8a 95       	dec	r24
 662:	e9 f7       	brne	.-6      	; 0x65e <__vector_13+0x48>
	}
}
 664:	ff 91       	pop	r31
 666:	ef 91       	pop	r30
 668:	bf 91       	pop	r27
 66a:	af 91       	pop	r26
 66c:	9f 91       	pop	r25
 66e:	8f 91       	pop	r24
 670:	7f 91       	pop	r23
 672:	6f 91       	pop	r22
 674:	5f 91       	pop	r21
 676:	4f 91       	pop	r20
 678:	3f 91       	pop	r19
 67a:	2f 91       	pop	r18
 67c:	0f 90       	pop	r0
 67e:	0f be       	out	0x3f, r0	; 63
 680:	0f 90       	pop	r0
 682:	1f 90       	pop	r1
 684:	18 95       	reti

00000686 <__vector_11>:

ISR(USART_RXC_vect){
 686:	1f 92       	push	r1
 688:	0f 92       	push	r0
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	0f 92       	push	r0
 68e:	11 24       	eor	r1, r1
 690:	8f 93       	push	r24
 692:	9f 93       	push	r25
 694:	ef 93       	push	r30
 696:	ff 93       	push	r31
	char recData=UDR;
 698:	8c b1       	in	r24, 0x0c	; 12
	if(recData == '\r' || recData == '\n'){			
 69a:	8d 30       	cpi	r24, 0x0D	; 13
 69c:	71 f0       	breq	.+28     	; 0x6ba <__vector_11+0x34>
 69e:	8a 30       	cpi	r24, 0x0A	; 10
 6a0:	61 f0       	breq	.+24     	; 0x6ba <__vector_11+0x34>
	} else {	
		if(u8ReceiveBufferIndex <= u8RX_BUFFER_SIZE){
 6a2:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <u8ReceiveBufferIndex>
 6a6:	95 36       	cpi	r25, 0x65	; 101
 6a8:	40 f4       	brcc	.+16     	; 0x6ba <__vector_11+0x34>
			au8UartReceiveBuffer[u8ReceiveBufferIndex]=recData;
 6aa:	e9 2f       	mov	r30, r25
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	e9 5c       	subi	r30, 0xC9	; 201
 6b0:	fe 4f       	sbci	r31, 0xFE	; 254
 6b2:	80 83       	st	Z, r24
			u8ReceiveBufferIndex++;
 6b4:	9f 5f       	subi	r25, 0xFF	; 255
 6b6:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <u8ReceiveBufferIndex>
		} else {
							
		}		
	}
}
 6ba:	ff 91       	pop	r31
 6bc:	ef 91       	pop	r30
 6be:	9f 91       	pop	r25
 6c0:	8f 91       	pop	r24
 6c2:	0f 90       	pop	r0
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	0f 90       	pop	r0
 6c8:	1f 90       	pop	r1
 6ca:	18 95       	reti

000006cc <__udivmodsi4>:
 6cc:	a1 e2       	ldi	r26, 0x21	; 33
 6ce:	1a 2e       	mov	r1, r26
 6d0:	aa 1b       	sub	r26, r26
 6d2:	bb 1b       	sub	r27, r27
 6d4:	fd 01       	movw	r30, r26
 6d6:	0d c0       	rjmp	.+26     	; 0x6f2 <__udivmodsi4_ep>

000006d8 <__udivmodsi4_loop>:
 6d8:	aa 1f       	adc	r26, r26
 6da:	bb 1f       	adc	r27, r27
 6dc:	ee 1f       	adc	r30, r30
 6de:	ff 1f       	adc	r31, r31
 6e0:	a2 17       	cp	r26, r18
 6e2:	b3 07       	cpc	r27, r19
 6e4:	e4 07       	cpc	r30, r20
 6e6:	f5 07       	cpc	r31, r21
 6e8:	20 f0       	brcs	.+8      	; 0x6f2 <__udivmodsi4_ep>
 6ea:	a2 1b       	sub	r26, r18
 6ec:	b3 0b       	sbc	r27, r19
 6ee:	e4 0b       	sbc	r30, r20
 6f0:	f5 0b       	sbc	r31, r21

000006f2 <__udivmodsi4_ep>:
 6f2:	66 1f       	adc	r22, r22
 6f4:	77 1f       	adc	r23, r23
 6f6:	88 1f       	adc	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	1a 94       	dec	r1
 6fc:	69 f7       	brne	.-38     	; 0x6d8 <__udivmodsi4_loop>
 6fe:	60 95       	com	r22
 700:	70 95       	com	r23
 702:	80 95       	com	r24
 704:	90 95       	com	r25
 706:	9b 01       	movw	r18, r22
 708:	ac 01       	movw	r20, r24
 70a:	bd 01       	movw	r22, r26
 70c:	cf 01       	movw	r24, r30
 70e:	08 95       	ret

00000710 <printf>:
 710:	a0 e0       	ldi	r26, 0x00	; 0
 712:	b0 e0       	ldi	r27, 0x00	; 0
 714:	ed e8       	ldi	r30, 0x8D	; 141
 716:	f3 e0       	ldi	r31, 0x03	; 3
 718:	c9 c2       	rjmp	.+1426   	; 0xcac <__prologue_saves__+0x20>
 71a:	ae 01       	movw	r20, r28
 71c:	4b 5f       	subi	r20, 0xFB	; 251
 71e:	5f 4f       	sbci	r21, 0xFF	; 255
 720:	fa 01       	movw	r30, r20
 722:	61 91       	ld	r22, Z+
 724:	71 91       	ld	r23, Z+
 726:	af 01       	movw	r20, r30
 728:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__iob+0x2>
 72c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__iob+0x3>
 730:	2b d0       	rcall	.+86     	; 0x788 <vfprintf>
 732:	e2 e0       	ldi	r30, 0x02	; 2
 734:	d7 c2       	rjmp	.+1454   	; 0xce4 <__epilogue_restores__+0x20>

00000736 <vsnprintf>:
 736:	ae e0       	ldi	r26, 0x0E	; 14
 738:	b0 e0       	ldi	r27, 0x00	; 0
 73a:	e0 ea       	ldi	r30, 0xA0	; 160
 73c:	f3 e0       	ldi	r31, 0x03	; 3
 73e:	b4 c2       	rjmp	.+1384   	; 0xca8 <__prologue_saves__+0x1c>
 740:	8c 01       	movw	r16, r24
 742:	fa 01       	movw	r30, r20
 744:	86 e0       	ldi	r24, 0x06	; 6
 746:	8c 83       	std	Y+4, r24	; 0x04
 748:	1a 83       	std	Y+2, r17	; 0x02
 74a:	09 83       	std	Y+1, r16	; 0x01
 74c:	77 ff       	sbrs	r23, 7
 74e:	02 c0       	rjmp	.+4      	; 0x754 <vsnprintf+0x1e>
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	70 e8       	ldi	r23, 0x80	; 128
 754:	cb 01       	movw	r24, r22
 756:	01 97       	sbiw	r24, 0x01	; 1
 758:	9e 83       	std	Y+6, r25	; 0x06
 75a:	8d 83       	std	Y+5, r24	; 0x05
 75c:	a9 01       	movw	r20, r18
 75e:	bf 01       	movw	r22, r30
 760:	ce 01       	movw	r24, r28
 762:	01 96       	adiw	r24, 0x01	; 1
 764:	11 d0       	rcall	.+34     	; 0x788 <vfprintf>
 766:	4d 81       	ldd	r20, Y+5	; 0x05
 768:	5e 81       	ldd	r21, Y+6	; 0x06
 76a:	57 fd       	sbrc	r21, 7
 76c:	0a c0       	rjmp	.+20     	; 0x782 <vsnprintf+0x4c>
 76e:	2f 81       	ldd	r18, Y+7	; 0x07
 770:	38 85       	ldd	r19, Y+8	; 0x08
 772:	42 17       	cp	r20, r18
 774:	53 07       	cpc	r21, r19
 776:	0c f4       	brge	.+2      	; 0x77a <vsnprintf+0x44>
 778:	9a 01       	movw	r18, r20
 77a:	f8 01       	movw	r30, r16
 77c:	e2 0f       	add	r30, r18
 77e:	f3 1f       	adc	r31, r19
 780:	10 82       	st	Z, r1
 782:	2e 96       	adiw	r28, 0x0e	; 14
 784:	e4 e0       	ldi	r30, 0x04	; 4
 786:	ac c2       	rjmp	.+1368   	; 0xce0 <__epilogue_restores__+0x1c>

00000788 <vfprintf>:
 788:	ab e0       	ldi	r26, 0x0B	; 11
 78a:	b0 e0       	ldi	r27, 0x00	; 0
 78c:	e9 ec       	ldi	r30, 0xC9	; 201
 78e:	f3 e0       	ldi	r31, 0x03	; 3
 790:	7d c2       	rjmp	.+1274   	; 0xc8c <__prologue_saves__>
 792:	6c 01       	movw	r12, r24
 794:	7b 01       	movw	r14, r22
 796:	8a 01       	movw	r16, r20
 798:	fc 01       	movw	r30, r24
 79a:	17 82       	std	Z+7, r1	; 0x07
 79c:	16 82       	std	Z+6, r1	; 0x06
 79e:	83 81       	ldd	r24, Z+3	; 0x03
 7a0:	81 ff       	sbrs	r24, 1
 7a2:	bf c1       	rjmp	.+894    	; 0xb22 <vfprintf+0x39a>
 7a4:	ce 01       	movw	r24, r28
 7a6:	01 96       	adiw	r24, 0x01	; 1
 7a8:	3c 01       	movw	r6, r24
 7aa:	f6 01       	movw	r30, r12
 7ac:	93 81       	ldd	r25, Z+3	; 0x03
 7ae:	f7 01       	movw	r30, r14
 7b0:	93 fd       	sbrc	r25, 3
 7b2:	85 91       	lpm	r24, Z+
 7b4:	93 ff       	sbrs	r25, 3
 7b6:	81 91       	ld	r24, Z+
 7b8:	7f 01       	movw	r14, r30
 7ba:	88 23       	and	r24, r24
 7bc:	09 f4       	brne	.+2      	; 0x7c0 <vfprintf+0x38>
 7be:	ad c1       	rjmp	.+858    	; 0xb1a <vfprintf+0x392>
 7c0:	85 32       	cpi	r24, 0x25	; 37
 7c2:	39 f4       	brne	.+14     	; 0x7d2 <vfprintf+0x4a>
 7c4:	93 fd       	sbrc	r25, 3
 7c6:	85 91       	lpm	r24, Z+
 7c8:	93 ff       	sbrs	r25, 3
 7ca:	81 91       	ld	r24, Z+
 7cc:	7f 01       	movw	r14, r30
 7ce:	85 32       	cpi	r24, 0x25	; 37
 7d0:	21 f4       	brne	.+8      	; 0x7da <vfprintf+0x52>
 7d2:	b6 01       	movw	r22, r12
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	c0 d1       	rcall	.+896    	; 0xb58 <fputc>
 7d8:	e8 cf       	rjmp	.-48     	; 0x7aa <vfprintf+0x22>
 7da:	91 2c       	mov	r9, r1
 7dc:	21 2c       	mov	r2, r1
 7de:	31 2c       	mov	r3, r1
 7e0:	ff e1       	ldi	r31, 0x1F	; 31
 7e2:	f3 15       	cp	r31, r3
 7e4:	d8 f0       	brcs	.+54     	; 0x81c <vfprintf+0x94>
 7e6:	8b 32       	cpi	r24, 0x2B	; 43
 7e8:	79 f0       	breq	.+30     	; 0x808 <vfprintf+0x80>
 7ea:	38 f4       	brcc	.+14     	; 0x7fa <vfprintf+0x72>
 7ec:	80 32       	cpi	r24, 0x20	; 32
 7ee:	79 f0       	breq	.+30     	; 0x80e <vfprintf+0x86>
 7f0:	83 32       	cpi	r24, 0x23	; 35
 7f2:	a1 f4       	brne	.+40     	; 0x81c <vfprintf+0x94>
 7f4:	23 2d       	mov	r18, r3
 7f6:	20 61       	ori	r18, 0x10	; 16
 7f8:	1d c0       	rjmp	.+58     	; 0x834 <vfprintf+0xac>
 7fa:	8d 32       	cpi	r24, 0x2D	; 45
 7fc:	61 f0       	breq	.+24     	; 0x816 <vfprintf+0x8e>
 7fe:	80 33       	cpi	r24, 0x30	; 48
 800:	69 f4       	brne	.+26     	; 0x81c <vfprintf+0x94>
 802:	23 2d       	mov	r18, r3
 804:	21 60       	ori	r18, 0x01	; 1
 806:	16 c0       	rjmp	.+44     	; 0x834 <vfprintf+0xac>
 808:	83 2d       	mov	r24, r3
 80a:	82 60       	ori	r24, 0x02	; 2
 80c:	38 2e       	mov	r3, r24
 80e:	e3 2d       	mov	r30, r3
 810:	e4 60       	ori	r30, 0x04	; 4
 812:	3e 2e       	mov	r3, r30
 814:	2a c0       	rjmp	.+84     	; 0x86a <vfprintf+0xe2>
 816:	f3 2d       	mov	r31, r3
 818:	f8 60       	ori	r31, 0x08	; 8
 81a:	1d c0       	rjmp	.+58     	; 0x856 <vfprintf+0xce>
 81c:	37 fc       	sbrc	r3, 7
 81e:	2d c0       	rjmp	.+90     	; 0x87a <vfprintf+0xf2>
 820:	20 ed       	ldi	r18, 0xD0	; 208
 822:	28 0f       	add	r18, r24
 824:	2a 30       	cpi	r18, 0x0A	; 10
 826:	40 f0       	brcs	.+16     	; 0x838 <vfprintf+0xb0>
 828:	8e 32       	cpi	r24, 0x2E	; 46
 82a:	b9 f4       	brne	.+46     	; 0x85a <vfprintf+0xd2>
 82c:	36 fc       	sbrc	r3, 6
 82e:	75 c1       	rjmp	.+746    	; 0xb1a <vfprintf+0x392>
 830:	23 2d       	mov	r18, r3
 832:	20 64       	ori	r18, 0x40	; 64
 834:	32 2e       	mov	r3, r18
 836:	19 c0       	rjmp	.+50     	; 0x86a <vfprintf+0xe2>
 838:	36 fe       	sbrs	r3, 6
 83a:	06 c0       	rjmp	.+12     	; 0x848 <vfprintf+0xc0>
 83c:	8a e0       	ldi	r24, 0x0A	; 10
 83e:	98 9e       	mul	r9, r24
 840:	20 0d       	add	r18, r0
 842:	11 24       	eor	r1, r1
 844:	92 2e       	mov	r9, r18
 846:	11 c0       	rjmp	.+34     	; 0x86a <vfprintf+0xe2>
 848:	ea e0       	ldi	r30, 0x0A	; 10
 84a:	2e 9e       	mul	r2, r30
 84c:	20 0d       	add	r18, r0
 84e:	11 24       	eor	r1, r1
 850:	22 2e       	mov	r2, r18
 852:	f3 2d       	mov	r31, r3
 854:	f0 62       	ori	r31, 0x20	; 32
 856:	3f 2e       	mov	r3, r31
 858:	08 c0       	rjmp	.+16     	; 0x86a <vfprintf+0xe2>
 85a:	8c 36       	cpi	r24, 0x6C	; 108
 85c:	21 f4       	brne	.+8      	; 0x866 <vfprintf+0xde>
 85e:	83 2d       	mov	r24, r3
 860:	80 68       	ori	r24, 0x80	; 128
 862:	38 2e       	mov	r3, r24
 864:	02 c0       	rjmp	.+4      	; 0x86a <vfprintf+0xe2>
 866:	88 36       	cpi	r24, 0x68	; 104
 868:	41 f4       	brne	.+16     	; 0x87a <vfprintf+0xf2>
 86a:	f7 01       	movw	r30, r14
 86c:	93 fd       	sbrc	r25, 3
 86e:	85 91       	lpm	r24, Z+
 870:	93 ff       	sbrs	r25, 3
 872:	81 91       	ld	r24, Z+
 874:	7f 01       	movw	r14, r30
 876:	81 11       	cpse	r24, r1
 878:	b3 cf       	rjmp	.-154    	; 0x7e0 <vfprintf+0x58>
 87a:	98 2f       	mov	r25, r24
 87c:	9f 7d       	andi	r25, 0xDF	; 223
 87e:	95 54       	subi	r25, 0x45	; 69
 880:	93 30       	cpi	r25, 0x03	; 3
 882:	28 f4       	brcc	.+10     	; 0x88e <vfprintf+0x106>
 884:	0c 5f       	subi	r16, 0xFC	; 252
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	9f e3       	ldi	r25, 0x3F	; 63
 88a:	99 83       	std	Y+1, r25	; 0x01
 88c:	0d c0       	rjmp	.+26     	; 0x8a8 <vfprintf+0x120>
 88e:	83 36       	cpi	r24, 0x63	; 99
 890:	31 f0       	breq	.+12     	; 0x89e <vfprintf+0x116>
 892:	83 37       	cpi	r24, 0x73	; 115
 894:	71 f0       	breq	.+28     	; 0x8b2 <vfprintf+0x12a>
 896:	83 35       	cpi	r24, 0x53	; 83
 898:	09 f0       	breq	.+2      	; 0x89c <vfprintf+0x114>
 89a:	55 c0       	rjmp	.+170    	; 0x946 <vfprintf+0x1be>
 89c:	20 c0       	rjmp	.+64     	; 0x8de <vfprintf+0x156>
 89e:	f8 01       	movw	r30, r16
 8a0:	80 81       	ld	r24, Z
 8a2:	89 83       	std	Y+1, r24	; 0x01
 8a4:	0e 5f       	subi	r16, 0xFE	; 254
 8a6:	1f 4f       	sbci	r17, 0xFF	; 255
 8a8:	88 24       	eor	r8, r8
 8aa:	83 94       	inc	r8
 8ac:	91 2c       	mov	r9, r1
 8ae:	53 01       	movw	r10, r6
 8b0:	12 c0       	rjmp	.+36     	; 0x8d6 <vfprintf+0x14e>
 8b2:	28 01       	movw	r4, r16
 8b4:	f2 e0       	ldi	r31, 0x02	; 2
 8b6:	4f 0e       	add	r4, r31
 8b8:	51 1c       	adc	r5, r1
 8ba:	f8 01       	movw	r30, r16
 8bc:	a0 80       	ld	r10, Z
 8be:	b1 80       	ldd	r11, Z+1	; 0x01
 8c0:	36 fe       	sbrs	r3, 6
 8c2:	03 c0       	rjmp	.+6      	; 0x8ca <vfprintf+0x142>
 8c4:	69 2d       	mov	r22, r9
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <vfprintf+0x146>
 8ca:	6f ef       	ldi	r22, 0xFF	; 255
 8cc:	7f ef       	ldi	r23, 0xFF	; 255
 8ce:	c5 01       	movw	r24, r10
 8d0:	38 d1       	rcall	.+624    	; 0xb42 <strnlen>
 8d2:	4c 01       	movw	r8, r24
 8d4:	82 01       	movw	r16, r4
 8d6:	f3 2d       	mov	r31, r3
 8d8:	ff 77       	andi	r31, 0x7F	; 127
 8da:	3f 2e       	mov	r3, r31
 8dc:	15 c0       	rjmp	.+42     	; 0x908 <vfprintf+0x180>
 8de:	28 01       	movw	r4, r16
 8e0:	22 e0       	ldi	r18, 0x02	; 2
 8e2:	42 0e       	add	r4, r18
 8e4:	51 1c       	adc	r5, r1
 8e6:	f8 01       	movw	r30, r16
 8e8:	a0 80       	ld	r10, Z
 8ea:	b1 80       	ldd	r11, Z+1	; 0x01
 8ec:	36 fe       	sbrs	r3, 6
 8ee:	03 c0       	rjmp	.+6      	; 0x8f6 <vfprintf+0x16e>
 8f0:	69 2d       	mov	r22, r9
 8f2:	70 e0       	ldi	r23, 0x00	; 0
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <vfprintf+0x172>
 8f6:	6f ef       	ldi	r22, 0xFF	; 255
 8f8:	7f ef       	ldi	r23, 0xFF	; 255
 8fa:	c5 01       	movw	r24, r10
 8fc:	17 d1       	rcall	.+558    	; 0xb2c <strnlen_P>
 8fe:	4c 01       	movw	r8, r24
 900:	f3 2d       	mov	r31, r3
 902:	f0 68       	ori	r31, 0x80	; 128
 904:	3f 2e       	mov	r3, r31
 906:	82 01       	movw	r16, r4
 908:	33 fc       	sbrc	r3, 3
 90a:	19 c0       	rjmp	.+50     	; 0x93e <vfprintf+0x1b6>
 90c:	82 2d       	mov	r24, r2
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	88 16       	cp	r8, r24
 912:	99 06       	cpc	r9, r25
 914:	a0 f4       	brcc	.+40     	; 0x93e <vfprintf+0x1b6>
 916:	b6 01       	movw	r22, r12
 918:	80 e2       	ldi	r24, 0x20	; 32
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	1d d1       	rcall	.+570    	; 0xb58 <fputc>
 91e:	2a 94       	dec	r2
 920:	f5 cf       	rjmp	.-22     	; 0x90c <vfprintf+0x184>
 922:	f5 01       	movw	r30, r10
 924:	37 fc       	sbrc	r3, 7
 926:	85 91       	lpm	r24, Z+
 928:	37 fe       	sbrs	r3, 7
 92a:	81 91       	ld	r24, Z+
 92c:	5f 01       	movw	r10, r30
 92e:	b6 01       	movw	r22, r12
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	12 d1       	rcall	.+548    	; 0xb58 <fputc>
 934:	21 10       	cpse	r2, r1
 936:	2a 94       	dec	r2
 938:	21 e0       	ldi	r18, 0x01	; 1
 93a:	82 1a       	sub	r8, r18
 93c:	91 08       	sbc	r9, r1
 93e:	81 14       	cp	r8, r1
 940:	91 04       	cpc	r9, r1
 942:	79 f7       	brne	.-34     	; 0x922 <vfprintf+0x19a>
 944:	e1 c0       	rjmp	.+450    	; 0xb08 <vfprintf+0x380>
 946:	84 36       	cpi	r24, 0x64	; 100
 948:	11 f0       	breq	.+4      	; 0x94e <vfprintf+0x1c6>
 94a:	89 36       	cpi	r24, 0x69	; 105
 94c:	39 f5       	brne	.+78     	; 0x99c <vfprintf+0x214>
 94e:	f8 01       	movw	r30, r16
 950:	37 fe       	sbrs	r3, 7
 952:	07 c0       	rjmp	.+14     	; 0x962 <vfprintf+0x1da>
 954:	60 81       	ld	r22, Z
 956:	71 81       	ldd	r23, Z+1	; 0x01
 958:	82 81       	ldd	r24, Z+2	; 0x02
 95a:	93 81       	ldd	r25, Z+3	; 0x03
 95c:	0c 5f       	subi	r16, 0xFC	; 252
 95e:	1f 4f       	sbci	r17, 0xFF	; 255
 960:	08 c0       	rjmp	.+16     	; 0x972 <vfprintf+0x1ea>
 962:	60 81       	ld	r22, Z
 964:	71 81       	ldd	r23, Z+1	; 0x01
 966:	07 2e       	mov	r0, r23
 968:	00 0c       	add	r0, r0
 96a:	88 0b       	sbc	r24, r24
 96c:	99 0b       	sbc	r25, r25
 96e:	0e 5f       	subi	r16, 0xFE	; 254
 970:	1f 4f       	sbci	r17, 0xFF	; 255
 972:	f3 2d       	mov	r31, r3
 974:	ff 76       	andi	r31, 0x6F	; 111
 976:	3f 2e       	mov	r3, r31
 978:	97 ff       	sbrs	r25, 7
 97a:	09 c0       	rjmp	.+18     	; 0x98e <vfprintf+0x206>
 97c:	90 95       	com	r25
 97e:	80 95       	com	r24
 980:	70 95       	com	r23
 982:	61 95       	neg	r22
 984:	7f 4f       	sbci	r23, 0xFF	; 255
 986:	8f 4f       	sbci	r24, 0xFF	; 255
 988:	9f 4f       	sbci	r25, 0xFF	; 255
 98a:	f0 68       	ori	r31, 0x80	; 128
 98c:	3f 2e       	mov	r3, r31
 98e:	2a e0       	ldi	r18, 0x0A	; 10
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	a3 01       	movw	r20, r6
 994:	1d d1       	rcall	.+570    	; 0xbd0 <__ultoa_invert>
 996:	88 2e       	mov	r8, r24
 998:	86 18       	sub	r8, r6
 99a:	44 c0       	rjmp	.+136    	; 0xa24 <vfprintf+0x29c>
 99c:	85 37       	cpi	r24, 0x75	; 117
 99e:	31 f4       	brne	.+12     	; 0x9ac <vfprintf+0x224>
 9a0:	23 2d       	mov	r18, r3
 9a2:	2f 7e       	andi	r18, 0xEF	; 239
 9a4:	b2 2e       	mov	r11, r18
 9a6:	2a e0       	ldi	r18, 0x0A	; 10
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	25 c0       	rjmp	.+74     	; 0x9f6 <vfprintf+0x26e>
 9ac:	93 2d       	mov	r25, r3
 9ae:	99 7f       	andi	r25, 0xF9	; 249
 9b0:	b9 2e       	mov	r11, r25
 9b2:	8f 36       	cpi	r24, 0x6F	; 111
 9b4:	c1 f0       	breq	.+48     	; 0x9e6 <vfprintf+0x25e>
 9b6:	18 f4       	brcc	.+6      	; 0x9be <vfprintf+0x236>
 9b8:	88 35       	cpi	r24, 0x58	; 88
 9ba:	79 f0       	breq	.+30     	; 0x9da <vfprintf+0x252>
 9bc:	ae c0       	rjmp	.+348    	; 0xb1a <vfprintf+0x392>
 9be:	80 37       	cpi	r24, 0x70	; 112
 9c0:	19 f0       	breq	.+6      	; 0x9c8 <vfprintf+0x240>
 9c2:	88 37       	cpi	r24, 0x78	; 120
 9c4:	21 f0       	breq	.+8      	; 0x9ce <vfprintf+0x246>
 9c6:	a9 c0       	rjmp	.+338    	; 0xb1a <vfprintf+0x392>
 9c8:	e9 2f       	mov	r30, r25
 9ca:	e0 61       	ori	r30, 0x10	; 16
 9cc:	be 2e       	mov	r11, r30
 9ce:	b4 fe       	sbrs	r11, 4
 9d0:	0d c0       	rjmp	.+26     	; 0x9ec <vfprintf+0x264>
 9d2:	fb 2d       	mov	r31, r11
 9d4:	f4 60       	ori	r31, 0x04	; 4
 9d6:	bf 2e       	mov	r11, r31
 9d8:	09 c0       	rjmp	.+18     	; 0x9ec <vfprintf+0x264>
 9da:	34 fe       	sbrs	r3, 4
 9dc:	0a c0       	rjmp	.+20     	; 0x9f2 <vfprintf+0x26a>
 9de:	29 2f       	mov	r18, r25
 9e0:	26 60       	ori	r18, 0x06	; 6
 9e2:	b2 2e       	mov	r11, r18
 9e4:	06 c0       	rjmp	.+12     	; 0x9f2 <vfprintf+0x26a>
 9e6:	28 e0       	ldi	r18, 0x08	; 8
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <vfprintf+0x26e>
 9ec:	20 e1       	ldi	r18, 0x10	; 16
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <vfprintf+0x26e>
 9f2:	20 e1       	ldi	r18, 0x10	; 16
 9f4:	32 e0       	ldi	r19, 0x02	; 2
 9f6:	f8 01       	movw	r30, r16
 9f8:	b7 fe       	sbrs	r11, 7
 9fa:	07 c0       	rjmp	.+14     	; 0xa0a <vfprintf+0x282>
 9fc:	60 81       	ld	r22, Z
 9fe:	71 81       	ldd	r23, Z+1	; 0x01
 a00:	82 81       	ldd	r24, Z+2	; 0x02
 a02:	93 81       	ldd	r25, Z+3	; 0x03
 a04:	0c 5f       	subi	r16, 0xFC	; 252
 a06:	1f 4f       	sbci	r17, 0xFF	; 255
 a08:	06 c0       	rjmp	.+12     	; 0xa16 <vfprintf+0x28e>
 a0a:	60 81       	ld	r22, Z
 a0c:	71 81       	ldd	r23, Z+1	; 0x01
 a0e:	80 e0       	ldi	r24, 0x00	; 0
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	0e 5f       	subi	r16, 0xFE	; 254
 a14:	1f 4f       	sbci	r17, 0xFF	; 255
 a16:	a3 01       	movw	r20, r6
 a18:	db d0       	rcall	.+438    	; 0xbd0 <__ultoa_invert>
 a1a:	88 2e       	mov	r8, r24
 a1c:	86 18       	sub	r8, r6
 a1e:	fb 2d       	mov	r31, r11
 a20:	ff 77       	andi	r31, 0x7F	; 127
 a22:	3f 2e       	mov	r3, r31
 a24:	36 fe       	sbrs	r3, 6
 a26:	0d c0       	rjmp	.+26     	; 0xa42 <vfprintf+0x2ba>
 a28:	23 2d       	mov	r18, r3
 a2a:	2e 7f       	andi	r18, 0xFE	; 254
 a2c:	a2 2e       	mov	r10, r18
 a2e:	89 14       	cp	r8, r9
 a30:	58 f4       	brcc	.+22     	; 0xa48 <vfprintf+0x2c0>
 a32:	34 fe       	sbrs	r3, 4
 a34:	0b c0       	rjmp	.+22     	; 0xa4c <vfprintf+0x2c4>
 a36:	32 fc       	sbrc	r3, 2
 a38:	09 c0       	rjmp	.+18     	; 0xa4c <vfprintf+0x2c4>
 a3a:	83 2d       	mov	r24, r3
 a3c:	8e 7e       	andi	r24, 0xEE	; 238
 a3e:	a8 2e       	mov	r10, r24
 a40:	05 c0       	rjmp	.+10     	; 0xa4c <vfprintf+0x2c4>
 a42:	b8 2c       	mov	r11, r8
 a44:	a3 2c       	mov	r10, r3
 a46:	03 c0       	rjmp	.+6      	; 0xa4e <vfprintf+0x2c6>
 a48:	b8 2c       	mov	r11, r8
 a4a:	01 c0       	rjmp	.+2      	; 0xa4e <vfprintf+0x2c6>
 a4c:	b9 2c       	mov	r11, r9
 a4e:	a4 fe       	sbrs	r10, 4
 a50:	0f c0       	rjmp	.+30     	; 0xa70 <vfprintf+0x2e8>
 a52:	fe 01       	movw	r30, r28
 a54:	e8 0d       	add	r30, r8
 a56:	f1 1d       	adc	r31, r1
 a58:	80 81       	ld	r24, Z
 a5a:	80 33       	cpi	r24, 0x30	; 48
 a5c:	21 f4       	brne	.+8      	; 0xa66 <vfprintf+0x2de>
 a5e:	9a 2d       	mov	r25, r10
 a60:	99 7e       	andi	r25, 0xE9	; 233
 a62:	a9 2e       	mov	r10, r25
 a64:	09 c0       	rjmp	.+18     	; 0xa78 <vfprintf+0x2f0>
 a66:	a2 fe       	sbrs	r10, 2
 a68:	06 c0       	rjmp	.+12     	; 0xa76 <vfprintf+0x2ee>
 a6a:	b3 94       	inc	r11
 a6c:	b3 94       	inc	r11
 a6e:	04 c0       	rjmp	.+8      	; 0xa78 <vfprintf+0x2f0>
 a70:	8a 2d       	mov	r24, r10
 a72:	86 78       	andi	r24, 0x86	; 134
 a74:	09 f0       	breq	.+2      	; 0xa78 <vfprintf+0x2f0>
 a76:	b3 94       	inc	r11
 a78:	a3 fc       	sbrc	r10, 3
 a7a:	10 c0       	rjmp	.+32     	; 0xa9c <vfprintf+0x314>
 a7c:	a0 fe       	sbrs	r10, 0
 a7e:	06 c0       	rjmp	.+12     	; 0xa8c <vfprintf+0x304>
 a80:	b2 14       	cp	r11, r2
 a82:	80 f4       	brcc	.+32     	; 0xaa4 <vfprintf+0x31c>
 a84:	28 0c       	add	r2, r8
 a86:	92 2c       	mov	r9, r2
 a88:	9b 18       	sub	r9, r11
 a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <vfprintf+0x31e>
 a8c:	b2 14       	cp	r11, r2
 a8e:	58 f4       	brcc	.+22     	; 0xaa6 <vfprintf+0x31e>
 a90:	b6 01       	movw	r22, r12
 a92:	80 e2       	ldi	r24, 0x20	; 32
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	60 d0       	rcall	.+192    	; 0xb58 <fputc>
 a98:	b3 94       	inc	r11
 a9a:	f8 cf       	rjmp	.-16     	; 0xa8c <vfprintf+0x304>
 a9c:	b2 14       	cp	r11, r2
 a9e:	18 f4       	brcc	.+6      	; 0xaa6 <vfprintf+0x31e>
 aa0:	2b 18       	sub	r2, r11
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <vfprintf+0x320>
 aa4:	98 2c       	mov	r9, r8
 aa6:	21 2c       	mov	r2, r1
 aa8:	a4 fe       	sbrs	r10, 4
 aaa:	0f c0       	rjmp	.+30     	; 0xaca <vfprintf+0x342>
 aac:	b6 01       	movw	r22, r12
 aae:	80 e3       	ldi	r24, 0x30	; 48
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	52 d0       	rcall	.+164    	; 0xb58 <fputc>
 ab4:	a2 fe       	sbrs	r10, 2
 ab6:	16 c0       	rjmp	.+44     	; 0xae4 <vfprintf+0x35c>
 ab8:	a1 fc       	sbrc	r10, 1
 aba:	03 c0       	rjmp	.+6      	; 0xac2 <vfprintf+0x33a>
 abc:	88 e7       	ldi	r24, 0x78	; 120
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <vfprintf+0x33e>
 ac2:	88 e5       	ldi	r24, 0x58	; 88
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	b6 01       	movw	r22, r12
 ac8:	0c c0       	rjmp	.+24     	; 0xae2 <vfprintf+0x35a>
 aca:	8a 2d       	mov	r24, r10
 acc:	86 78       	andi	r24, 0x86	; 134
 ace:	51 f0       	breq	.+20     	; 0xae4 <vfprintf+0x35c>
 ad0:	a1 fe       	sbrs	r10, 1
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <vfprintf+0x350>
 ad4:	8b e2       	ldi	r24, 0x2B	; 43
 ad6:	01 c0       	rjmp	.+2      	; 0xada <vfprintf+0x352>
 ad8:	80 e2       	ldi	r24, 0x20	; 32
 ada:	a7 fc       	sbrc	r10, 7
 adc:	8d e2       	ldi	r24, 0x2D	; 45
 ade:	b6 01       	movw	r22, r12
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	3a d0       	rcall	.+116    	; 0xb58 <fputc>
 ae4:	89 14       	cp	r8, r9
 ae6:	30 f4       	brcc	.+12     	; 0xaf4 <vfprintf+0x36c>
 ae8:	b6 01       	movw	r22, r12
 aea:	80 e3       	ldi	r24, 0x30	; 48
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	34 d0       	rcall	.+104    	; 0xb58 <fputc>
 af0:	9a 94       	dec	r9
 af2:	f8 cf       	rjmp	.-16     	; 0xae4 <vfprintf+0x35c>
 af4:	8a 94       	dec	r8
 af6:	f3 01       	movw	r30, r6
 af8:	e8 0d       	add	r30, r8
 afa:	f1 1d       	adc	r31, r1
 afc:	80 81       	ld	r24, Z
 afe:	b6 01       	movw	r22, r12
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	2a d0       	rcall	.+84     	; 0xb58 <fputc>
 b04:	81 10       	cpse	r8, r1
 b06:	f6 cf       	rjmp	.-20     	; 0xaf4 <vfprintf+0x36c>
 b08:	22 20       	and	r2, r2
 b0a:	09 f4       	brne	.+2      	; 0xb0e <vfprintf+0x386>
 b0c:	4e ce       	rjmp	.-868    	; 0x7aa <vfprintf+0x22>
 b0e:	b6 01       	movw	r22, r12
 b10:	80 e2       	ldi	r24, 0x20	; 32
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	21 d0       	rcall	.+66     	; 0xb58 <fputc>
 b16:	2a 94       	dec	r2
 b18:	f7 cf       	rjmp	.-18     	; 0xb08 <vfprintf+0x380>
 b1a:	f6 01       	movw	r30, r12
 b1c:	86 81       	ldd	r24, Z+6	; 0x06
 b1e:	97 81       	ldd	r25, Z+7	; 0x07
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <vfprintf+0x39e>
 b22:	8f ef       	ldi	r24, 0xFF	; 255
 b24:	9f ef       	ldi	r25, 0xFF	; 255
 b26:	2b 96       	adiw	r28, 0x0b	; 11
 b28:	e2 e1       	ldi	r30, 0x12	; 18
 b2a:	cc c0       	rjmp	.+408    	; 0xcc4 <__epilogue_restores__>

00000b2c <strnlen_P>:
 b2c:	fc 01       	movw	r30, r24
 b2e:	05 90       	lpm	r0, Z+
 b30:	61 50       	subi	r22, 0x01	; 1
 b32:	70 40       	sbci	r23, 0x00	; 0
 b34:	01 10       	cpse	r0, r1
 b36:	d8 f7       	brcc	.-10     	; 0xb2e <strnlen_P+0x2>
 b38:	80 95       	com	r24
 b3a:	90 95       	com	r25
 b3c:	8e 0f       	add	r24, r30
 b3e:	9f 1f       	adc	r25, r31
 b40:	08 95       	ret

00000b42 <strnlen>:
 b42:	fc 01       	movw	r30, r24
 b44:	61 50       	subi	r22, 0x01	; 1
 b46:	70 40       	sbci	r23, 0x00	; 0
 b48:	01 90       	ld	r0, Z+
 b4a:	01 10       	cpse	r0, r1
 b4c:	d8 f7       	brcc	.-10     	; 0xb44 <strnlen+0x2>
 b4e:	80 95       	com	r24
 b50:	90 95       	com	r25
 b52:	8e 0f       	add	r24, r30
 b54:	9f 1f       	adc	r25, r31
 b56:	08 95       	ret

00000b58 <fputc>:
 b58:	0f 93       	push	r16
 b5a:	1f 93       	push	r17
 b5c:	cf 93       	push	r28
 b5e:	df 93       	push	r29
 b60:	fb 01       	movw	r30, r22
 b62:	23 81       	ldd	r18, Z+3	; 0x03
 b64:	21 fd       	sbrc	r18, 1
 b66:	03 c0       	rjmp	.+6      	; 0xb6e <fputc+0x16>
 b68:	8f ef       	ldi	r24, 0xFF	; 255
 b6a:	9f ef       	ldi	r25, 0xFF	; 255
 b6c:	2c c0       	rjmp	.+88     	; 0xbc6 <fputc+0x6e>
 b6e:	22 ff       	sbrs	r18, 2
 b70:	16 c0       	rjmp	.+44     	; 0xb9e <fputc+0x46>
 b72:	46 81       	ldd	r20, Z+6	; 0x06
 b74:	57 81       	ldd	r21, Z+7	; 0x07
 b76:	24 81       	ldd	r18, Z+4	; 0x04
 b78:	35 81       	ldd	r19, Z+5	; 0x05
 b7a:	42 17       	cp	r20, r18
 b7c:	53 07       	cpc	r21, r19
 b7e:	44 f4       	brge	.+16     	; 0xb90 <fputc+0x38>
 b80:	a0 81       	ld	r26, Z
 b82:	b1 81       	ldd	r27, Z+1	; 0x01
 b84:	9d 01       	movw	r18, r26
 b86:	2f 5f       	subi	r18, 0xFF	; 255
 b88:	3f 4f       	sbci	r19, 0xFF	; 255
 b8a:	31 83       	std	Z+1, r19	; 0x01
 b8c:	20 83       	st	Z, r18
 b8e:	8c 93       	st	X, r24
 b90:	26 81       	ldd	r18, Z+6	; 0x06
 b92:	37 81       	ldd	r19, Z+7	; 0x07
 b94:	2f 5f       	subi	r18, 0xFF	; 255
 b96:	3f 4f       	sbci	r19, 0xFF	; 255
 b98:	37 83       	std	Z+7, r19	; 0x07
 b9a:	26 83       	std	Z+6, r18	; 0x06
 b9c:	14 c0       	rjmp	.+40     	; 0xbc6 <fputc+0x6e>
 b9e:	8b 01       	movw	r16, r22
 ba0:	ec 01       	movw	r28, r24
 ba2:	fb 01       	movw	r30, r22
 ba4:	00 84       	ldd	r0, Z+8	; 0x08
 ba6:	f1 85       	ldd	r31, Z+9	; 0x09
 ba8:	e0 2d       	mov	r30, r0
 baa:	09 95       	icall
 bac:	89 2b       	or	r24, r25
 bae:	e1 f6       	brne	.-72     	; 0xb68 <fputc+0x10>
 bb0:	d8 01       	movw	r26, r16
 bb2:	16 96       	adiw	r26, 0x06	; 6
 bb4:	8d 91       	ld	r24, X+
 bb6:	9c 91       	ld	r25, X
 bb8:	17 97       	sbiw	r26, 0x07	; 7
 bba:	01 96       	adiw	r24, 0x01	; 1
 bbc:	17 96       	adiw	r26, 0x07	; 7
 bbe:	9c 93       	st	X, r25
 bc0:	8e 93       	st	-X, r24
 bc2:	16 97       	sbiw	r26, 0x06	; 6
 bc4:	ce 01       	movw	r24, r28
 bc6:	df 91       	pop	r29
 bc8:	cf 91       	pop	r28
 bca:	1f 91       	pop	r17
 bcc:	0f 91       	pop	r16
 bce:	08 95       	ret

00000bd0 <__ultoa_invert>:
 bd0:	fa 01       	movw	r30, r20
 bd2:	aa 27       	eor	r26, r26
 bd4:	28 30       	cpi	r18, 0x08	; 8
 bd6:	51 f1       	breq	.+84     	; 0xc2c <__ultoa_invert+0x5c>
 bd8:	20 31       	cpi	r18, 0x10	; 16
 bda:	81 f1       	breq	.+96     	; 0xc3c <__ultoa_invert+0x6c>
 bdc:	e8 94       	clt
 bde:	6f 93       	push	r22
 be0:	6e 7f       	andi	r22, 0xFE	; 254
 be2:	6e 5f       	subi	r22, 0xFE	; 254
 be4:	7f 4f       	sbci	r23, 0xFF	; 255
 be6:	8f 4f       	sbci	r24, 0xFF	; 255
 be8:	9f 4f       	sbci	r25, 0xFF	; 255
 bea:	af 4f       	sbci	r26, 0xFF	; 255
 bec:	b1 e0       	ldi	r27, 0x01	; 1
 bee:	3e d0       	rcall	.+124    	; 0xc6c <__ultoa_invert+0x9c>
 bf0:	b4 e0       	ldi	r27, 0x04	; 4
 bf2:	3c d0       	rcall	.+120    	; 0xc6c <__ultoa_invert+0x9c>
 bf4:	67 0f       	add	r22, r23
 bf6:	78 1f       	adc	r23, r24
 bf8:	89 1f       	adc	r24, r25
 bfa:	9a 1f       	adc	r25, r26
 bfc:	a1 1d       	adc	r26, r1
 bfe:	68 0f       	add	r22, r24
 c00:	79 1f       	adc	r23, r25
 c02:	8a 1f       	adc	r24, r26
 c04:	91 1d       	adc	r25, r1
 c06:	a1 1d       	adc	r26, r1
 c08:	6a 0f       	add	r22, r26
 c0a:	71 1d       	adc	r23, r1
 c0c:	81 1d       	adc	r24, r1
 c0e:	91 1d       	adc	r25, r1
 c10:	a1 1d       	adc	r26, r1
 c12:	20 d0       	rcall	.+64     	; 0xc54 <__ultoa_invert+0x84>
 c14:	09 f4       	brne	.+2      	; 0xc18 <__ultoa_invert+0x48>
 c16:	68 94       	set
 c18:	3f 91       	pop	r19
 c1a:	2a e0       	ldi	r18, 0x0A	; 10
 c1c:	26 9f       	mul	r18, r22
 c1e:	11 24       	eor	r1, r1
 c20:	30 19       	sub	r19, r0
 c22:	30 5d       	subi	r19, 0xD0	; 208
 c24:	31 93       	st	Z+, r19
 c26:	de f6       	brtc	.-74     	; 0xbde <__ultoa_invert+0xe>
 c28:	cf 01       	movw	r24, r30
 c2a:	08 95       	ret
 c2c:	46 2f       	mov	r20, r22
 c2e:	47 70       	andi	r20, 0x07	; 7
 c30:	40 5d       	subi	r20, 0xD0	; 208
 c32:	41 93       	st	Z+, r20
 c34:	b3 e0       	ldi	r27, 0x03	; 3
 c36:	0f d0       	rcall	.+30     	; 0xc56 <__ultoa_invert+0x86>
 c38:	c9 f7       	brne	.-14     	; 0xc2c <__ultoa_invert+0x5c>
 c3a:	f6 cf       	rjmp	.-20     	; 0xc28 <__ultoa_invert+0x58>
 c3c:	46 2f       	mov	r20, r22
 c3e:	4f 70       	andi	r20, 0x0F	; 15
 c40:	40 5d       	subi	r20, 0xD0	; 208
 c42:	4a 33       	cpi	r20, 0x3A	; 58
 c44:	18 f0       	brcs	.+6      	; 0xc4c <__ultoa_invert+0x7c>
 c46:	49 5d       	subi	r20, 0xD9	; 217
 c48:	31 fd       	sbrc	r19, 1
 c4a:	40 52       	subi	r20, 0x20	; 32
 c4c:	41 93       	st	Z+, r20
 c4e:	02 d0       	rcall	.+4      	; 0xc54 <__ultoa_invert+0x84>
 c50:	a9 f7       	brne	.-22     	; 0xc3c <__ultoa_invert+0x6c>
 c52:	ea cf       	rjmp	.-44     	; 0xc28 <__ultoa_invert+0x58>
 c54:	b4 e0       	ldi	r27, 0x04	; 4
 c56:	a6 95       	lsr	r26
 c58:	97 95       	ror	r25
 c5a:	87 95       	ror	r24
 c5c:	77 95       	ror	r23
 c5e:	67 95       	ror	r22
 c60:	ba 95       	dec	r27
 c62:	c9 f7       	brne	.-14     	; 0xc56 <__ultoa_invert+0x86>
 c64:	00 97       	sbiw	r24, 0x00	; 0
 c66:	61 05       	cpc	r22, r1
 c68:	71 05       	cpc	r23, r1
 c6a:	08 95       	ret
 c6c:	9b 01       	movw	r18, r22
 c6e:	ac 01       	movw	r20, r24
 c70:	0a 2e       	mov	r0, r26
 c72:	06 94       	lsr	r0
 c74:	57 95       	ror	r21
 c76:	47 95       	ror	r20
 c78:	37 95       	ror	r19
 c7a:	27 95       	ror	r18
 c7c:	ba 95       	dec	r27
 c7e:	c9 f7       	brne	.-14     	; 0xc72 <__ultoa_invert+0xa2>
 c80:	62 0f       	add	r22, r18
 c82:	73 1f       	adc	r23, r19
 c84:	84 1f       	adc	r24, r20
 c86:	95 1f       	adc	r25, r21
 c88:	a0 1d       	adc	r26, r0
 c8a:	08 95       	ret

00000c8c <__prologue_saves__>:
 c8c:	2f 92       	push	r2
 c8e:	3f 92       	push	r3
 c90:	4f 92       	push	r4
 c92:	5f 92       	push	r5
 c94:	6f 92       	push	r6
 c96:	7f 92       	push	r7
 c98:	8f 92       	push	r8
 c9a:	9f 92       	push	r9
 c9c:	af 92       	push	r10
 c9e:	bf 92       	push	r11
 ca0:	cf 92       	push	r12
 ca2:	df 92       	push	r13
 ca4:	ef 92       	push	r14
 ca6:	ff 92       	push	r15
 ca8:	0f 93       	push	r16
 caa:	1f 93       	push	r17
 cac:	cf 93       	push	r28
 cae:	df 93       	push	r29
 cb0:	cd b7       	in	r28, 0x3d	; 61
 cb2:	de b7       	in	r29, 0x3e	; 62
 cb4:	ca 1b       	sub	r28, r26
 cb6:	db 0b       	sbc	r29, r27
 cb8:	0f b6       	in	r0, 0x3f	; 63
 cba:	f8 94       	cli
 cbc:	de bf       	out	0x3e, r29	; 62
 cbe:	0f be       	out	0x3f, r0	; 63
 cc0:	cd bf       	out	0x3d, r28	; 61
 cc2:	09 94       	ijmp

00000cc4 <__epilogue_restores__>:
 cc4:	2a 88       	ldd	r2, Y+18	; 0x12
 cc6:	39 88       	ldd	r3, Y+17	; 0x11
 cc8:	48 88       	ldd	r4, Y+16	; 0x10
 cca:	5f 84       	ldd	r5, Y+15	; 0x0f
 ccc:	6e 84       	ldd	r6, Y+14	; 0x0e
 cce:	7d 84       	ldd	r7, Y+13	; 0x0d
 cd0:	8c 84       	ldd	r8, Y+12	; 0x0c
 cd2:	9b 84       	ldd	r9, Y+11	; 0x0b
 cd4:	aa 84       	ldd	r10, Y+10	; 0x0a
 cd6:	b9 84       	ldd	r11, Y+9	; 0x09
 cd8:	c8 84       	ldd	r12, Y+8	; 0x08
 cda:	df 80       	ldd	r13, Y+7	; 0x07
 cdc:	ee 80       	ldd	r14, Y+6	; 0x06
 cde:	fd 80       	ldd	r15, Y+5	; 0x05
 ce0:	0c 81       	ldd	r16, Y+4	; 0x04
 ce2:	1b 81       	ldd	r17, Y+3	; 0x03
 ce4:	aa 81       	ldd	r26, Y+2	; 0x02
 ce6:	b9 81       	ldd	r27, Y+1	; 0x01
 ce8:	ce 0f       	add	r28, r30
 cea:	d1 1d       	adc	r29, r1
 cec:	0f b6       	in	r0, 0x3f	; 63
 cee:	f8 94       	cli
 cf0:	de bf       	out	0x3e, r29	; 62
 cf2:	0f be       	out	0x3f, r0	; 63
 cf4:	cd bf       	out	0x3d, r28	; 61
 cf6:	ed 01       	movw	r28, r26
 cf8:	08 95       	ret

00000cfa <_exit>:
 cfa:	f8 94       	cli

00000cfc <__stop_program>:
 cfc:	ff cf       	rjmp	.-2      	; 0xcfc <__stop_program>
